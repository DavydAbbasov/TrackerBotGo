package handlers

import (
	"fmt"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	log "github.com/rs/zerolog/log"
)

type TrackingUserState struct {
	State       string
	CurrentName string
}

var TrackingUserStates = map[int64]*TrackingUserState{}

type Activity struct {
	NameActivity string
	TimeEntry    []TimeEntry
}

type TimeEntry struct {
	Timestamp time.Time
	Start     time.Time
	End       time.Time
	Duration  time.Duration
}

var ActivityCollections = map[int64][]Activity{}

func (d *Dispatcher) ShowTrackingMenu(chatID int64) {
	text := `
üìà *Track*

üìä –¢–µ–∫—É—â–∞—è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: *Go*  
‚è±  –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç—Ä–µ–∫: *4 —á 52 –º–∏–Ω* 
üî• –°—Ç—Ä–∏–∫: *104 –¥–Ω—è*  
üìÖ –°–µ–≥–æ–¥–Ω—è: *4 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*
`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = buildTrackKeyboard()

	_, err := d.bot.Send(msg)
	if err != nil {
		log.Error().Err(err).Msg("err showing profil")

	}
}
func buildTrackKeyboard() tgbotapi.InlineKeyboardMarkup {
	row1 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "selection_activity"),
		tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "create_activity"),
	)

	row2 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìà –ú–æ–∏ –æ—Ç—á—ë—Ç—ã", "summary_activity"),
		tgbotapi.NewInlineKeyboardButtonData("üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å", "exit"),
	)

	return tgbotapi.NewInlineKeyboardMarkup(row1, row2)

}
func (d *Dispatcher) ShowActivityList(chatID int64, userID int64) {
	text := "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—á—ë—Ç–∞:"

	activities := ActivityCollections[userID]

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, activity := range activities {
		if activity.NameActivity == "" {
			log.Warn().Msg("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–±–æ—Ä–∫–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
			continue
		}
		btn := tgbotapi.NewInlineKeyboardButtonData(activity.NameActivity,
			"activity_report_"+activity.NameActivity)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}
	inlineMenu := tgbotapi.NewInlineKeyboardMarkup(rows...)

	replyMenu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìä –°–µ–≥–æ–¥–Ω—è"),
			tgbotapi.NewKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ Home"),
		),
	)
	replyMenu.ResizeKeyboard = true

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = replyMenu

	_, err := d.bot.Send(msg)
	if err != nil {
		log.Error().Err(err).Msg("error sending activity list")
	}

	msg2 := tgbotapi.NewMessage(chatID, "üéØ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
	msg2.ReplyMarkup = inlineMenu
	d.bot.Send(msg2)

}
func (d *Dispatcher) ShowActivityReport(chatID int64, userID int64, activityName string) {

	activities := ActivityCollections[userID]

	if len(activities) == 0 {
		msgError := tgbotapi.NewMessage(chatID, "empty")
		if _, err := d.bot.Send(msgError); err != nil {
			log.Error().Err(err).Msg("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
			return
		}
	}

	text := fmt.Sprintf(`

üìå *–û—Ç—á—ë—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:* _%s_ 
	
üî• –°—Ç—Ä–∏–∫: *104 –¥–Ω—è* 
üìÖ –ù–∞—á–∞–ª–æ: *12 –º–∞—è 2024*  
üìà –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: *31*  
‚è± –í—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è: *2 —á 40 –º–∏–Ω*

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:`, activityName)

	replyMenu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìÖ –ü–µ—Ä–∏–æ–¥"),
			tgbotapi.NewKeyboardButton("üìä –ù–µ–¥–µ–ª—è"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç"),
			tgbotapi.NewKeyboardButton("üìä –°–µ–≥–æ–¥–Ω—è"),
		),

		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å"),
			tgbotapi.NewKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ Home"),
		),
	)
	replyMenu.ResizeKeyboard = true

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = replyMenu
	if _, err := d.bot.Send(msg); err != nil {
		log.Error().Err(err).Msg("error in displaying the report menu")
	}

}
func (d *Dispatcher) ShowCalendar(chatID int64) {
	text := `
üìä *–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:* 
üìÖ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∂–µ–ª–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥:*

üìà –°—Ä. –∫–ª. —á. –≤ –¥–µ–Ω—å: *2—á 32–º–∏–Ω*
üìë –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: *23.09.2026*

üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:
`
	weekDays := []string{"–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"}

	dates := []string{"8.7", "9.7", "10.7", "11.7", "12.7", "13.7", "14.7"}

	data := []string{"2:10", "1:30", "0:00", "3", "2:45", "1", "0:15"}

	var rows [][]tgbotapi.InlineKeyboardButton

	var dayRow []tgbotapi.InlineKeyboardButton
	for _, day := range weekDays {
		dayRow = append(dayRow, tgbotapi.NewInlineKeyboardButtonData(day, "noop"))

	}
	rows = append(rows, dayRow)

	var dateRow []tgbotapi.InlineKeyboardButton
	for _, date := range dates {
		dateRow = append(dateRow, tgbotapi.NewInlineKeyboardButtonData(date, "noop"))
	}
	rows = append(rows, dateRow)

	var dataRow []tgbotapi.InlineKeyboardButton
	for _, entry := range data {
		dataRow = append(dataRow, tgbotapi.NewInlineKeyboardButtonData(entry, "noop"))
	}
	rows = append(rows, dataRow)

	navRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(" ‚è™ ", "prev_week"),
		tgbotapi.NewInlineKeyboardButtonData(" ‚è© ", "next_week"),
	)
	rows = append(rows, navRow)

	inlineMenu := tgbotapi.NewInlineKeyboardMarkup(rows...)

	replyMenu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
			tgbotapi.NewKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ Home"),
		),
	)
	replyMenu.ResizeKeyboard = true

	msgReply := tgbotapi.NewMessage(chatID, "üìÖ")
	msgReply.ReplyMarkup = replyMenu
	if _, err := d.bot.Send(msgReply); err != nil {
		log.Error().Err(err).Msg("error showing calendar reply")
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = inlineMenu

	if _, err := d.bot.Send(msg); err != nil {
		log.Error().Err(err).Msg("error showing calendar inlain")
	}
}
func (d *Dispatcher) AddActivity(chatID int64) {
	text := `
üìå *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*

–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Ç–æ–≥–æ, —á–µ–º –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å. –ü—Ä–∏–º–µ—Ä—ã:  
- üß† Go  
- üìö English  
- üèãÔ∏è Workout

–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏* 
`
	TrackingUserStates[chatID] = &TrackingUserState{
		State: "waiting_for_activity_name",
	}

	replyMenu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
			tgbotapi.NewKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ Home"),
		),
	)

	replyMenu.ResizeKeyboard = true

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = replyMenu
	if _, err := d.bot.Send(msg); err != nil {
		log.Error().Err(err).Msg("error showing create activity prompt")
	}
}
func GetActivityMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚è±Ô∏è –¢–∞–π–º–µ—Ä:15"),
			tgbotapi.NewKeyboardButton("‚è±Ô∏è –¢–∞–π–º–µ—Ä:60"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å —Ç–∞–º–µ—Ä"),
			tgbotapi.NewKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ Home"),
		),
	)

}

func (d *Dispatcher) ProcessAddActivity(ctx *MsgContext) {
	// userID := msg.From.ID
	// chatID := msg.Chat.ID
	input := strings.TrimSpace(ctx.Text)

	if input == "‚ÑπÔ∏è –ü–æ–º–æ—â—å" {
		d.bot.Send(tgbotapi.NewMessage(ctx.ChatID, "–≤—Ä–µ–º–µ–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ"))
		return
	}

	if input == "" {
		delete(TrackingUserStates, ctx.UserID) //–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞—Ä—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
		d.ShowMainMenu(ctx.ChatID)
		return
	}

	state := TrackingUserStates[ctx.UserID]
	state.CurrentName = input
	state.State = "activity_created"

	text := fmt.Sprintf("–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:%s,—Å–æ–∑–¥–∞–Ω–∞", input)
	confirmMsg := tgbotapi.NewMessage(ctx.ChatID, text)
	confirmMsg.ParseMode = "Markdown"

	repluMenu := GetActivityMenuKeyboard()
	repluMenu.ResizeKeyboard = true
	confirmMsg.ReplyMarkup = repluMenu
	if _, err := d.bot.Send(confirmMsg); err != nil {
		log.Error().Err(err).Msg("err showing add_activity")
	}

	ActivityCollections[ctx.UserID] = append(ActivityCollections[ctx.UserID], Activity{
		NameActivity: input,
		TimeEntry:    []TimeEntry{},
	})

	followupMsg := tgbotapi.NewMessage(ctx.ChatID, "‚ûï –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞.")
	d.bot.Send(followupMsg)

}
func (d *Dispatcher) SelectionActivityPromt(chatID int64, userID int64) {
	text := `
üìÇ *–í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å*

üìÇ –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: *ü¶´Go*
üìÇ –ê—Ä—Ö–∏–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ: *12*

*–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ç—Ä–µ–∫–∞:*
`
	activities := ActivityCollections[userID]

	if len(activities) == 0 {
		msg := tgbotapi.NewMessage(chatID, "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")
		if _, err := d.bot.Send(msg); err != nil {
			log.Error().Err(err).Msg("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
			return
		}
	}

	var rows [][]tgbotapi.InlineKeyboardButton

	for _, activity := range activities {
		if activity.NameActivity == "" {
			log.Warn().Msg("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–±–æ—Ä–∫–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
			continue
		}
		btn := tgbotapi.NewInlineKeyboardButtonData(activity.NameActivity, "activity_selection_"+activity.NameActivity)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}

	inlineMenu := tgbotapi.NewInlineKeyboardMarkup(rows...)

	replyMenu := GetActivityMenuKeyboard()

	replyMenu.ResizeKeyboard = true

	msgReply := tgbotapi.NewMessage(chatID, "üóÇ")
	msgReply.ReplyMarkup = replyMenu
	if _, err := d.bot.Send(msgReply); err != nil {
		log.Error().Err(err).Msg("error showing calendar reply")
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = inlineMenu
	if _, err := d.bot.Send(msg); err != nil {
		log.Error().Err(err).Msg("error showing calendar reply")
	}
}
