package dispatcher

import (
	"fmt"
	"strings"

	"github.com/DavydAbbasov/trecker_bot/pkg/interfaces"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	log "github.com/rs/zerolog/log"
)

func ShowLearningMenu(bot interfaces.BotAPI, chatID int64) {
	text := `
üß† *Learning*

üåê –Ø–∑—ã–∫: *–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß* 
üìä –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: *463*  
üìò –ù–∞ —Å–µ–≥–æ–¥–Ω—è: *10*  
‚úÖ –í—ã—É—á–µ–Ω–æ: *296*  
üïê –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ: *—á–µ—Ä–µ–∑ 25 –º–∏–Ω*

`
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = buuildLerningKeyboard()

	_, err := bot.Send(msg)
	if err != nil {
		log.Error().Err(err).Msg("err showing learning")
	}
}

// "–∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è" —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
// –º–æ–¥–µ–ª–∏—Ä—É–µ—à—å —ç—Ç–∞–ø—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—à—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
type UserState struct {
	State string /* <--- –∫–ª—é—á –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º
		–∫–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–µ–µ "—Å–æ—Å—Ç–æ—è–Ω–∏–µ" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		–£–∑–Ω–∞—Ç—å, —á—Ç–æ —Å–µ–π—á–∞—Å –¥–µ–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

	| –ó–Ω–∞—á–µ–Ω–∏–µ `State`                | –ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç                           |
	| ------------------------------- | ------------------------------------------ |
	| `"waiting_for_collection_name"` | –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø–æ–¥–±–æ—Ä–∫–∏    |
	| `"collection_created"`          | –ø–æ–¥–±–æ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –∂–¥—ë–º –¥–µ–π—Å—Ç–≤–∏–π            |
	| `"waiting_for_word"`            | –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ           |
	| `"waiting_for_translation"`     | –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –∫ —Å–ª–æ–≤—É |
	*/
	CurrentColl  string // Current–¢–µ–∫—É—â–∏–πColl—Å–±–æ—Ä - –∏–º—è –ø–æ–¥–±–æ—Ä–∫–∏, –≤ –∫–æ—Ç–æ—Ä—É—é –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—ë—Ç –ø–æ–¥–±–æ—Ä–∫—É, –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –µ—ë –∏–º—è
	PendingWorld string // Pending–û–∂–∏–¥–∞—é—â–µ–µ —Å–ª–æ–≤–æ -  –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–ª–æ–≤–æ, –∂–¥—ë–º –ø–µ—Ä–µ–≤–æ–¥–∞. –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–ª–æ–≤–æ, –∞ –ø–æ—Ç–æ–º –ø–µ—Ä–µ–≤–æ–¥ ‚Äî –Ω–∞–¥–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ
}
type Collections struct {
	TextInput1 string //–ø–µ—Ä–≤—ã–π –≤–≤–æ–¥
	TextInput2 string //–≤—Ç–æ—Ä–æ–π –≤–≤–æ–¥
}
type Collection struct { //[]Collection ‚Üí —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	NameCollection string
	Collections    []Collections //[]Collections ‚Üí —Å—Ç—Ä–∫—É–∫—Ç—É—Ä–∞ –∫–æ–ª–µ–∫—Ü–∏–∏
}

var UserStates = map[int64]*UserState{} // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–±–æ—Ä–∫–∏, –∫–æ–≥–¥–∞ –º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

var userCollections = map[int64][]Collection{} //–≠—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚Äî –º–∞–ø–∞ (map), –≤ –∫–æ—Ç–æ—Ä–æ–π:
// int64 ‚Äî –∫–ª—é—á ‚Äî —ç—Ç–æ userID, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
// []Collection ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–¥–±–æ—Ä–æ–∫ (collections), –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

func buuildLerningKeyboard() tgbotapi.InlineKeyboardMarkup {
	row1 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫—É", "add_collection"),
		tgbotapi.NewInlineKeyboardButtonData("üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞", "random_words"),
	)
	row2 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîÅ –ê—Ä—Ö–∏–≤ –ø–æ–¥–±–æ—Ä–æ–∫", "switch_learning_actv"),
		tgbotapi.NewInlineKeyboardButtonData("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "summary_learning"),
	)
	row3 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üóÇ –ë–∞–∑–∞ —Å–ª–æ–≤", "base_words"))
	return tgbotapi.NewInlineKeyboardMarkup(row1, row2, row3)
}

func AddCollection(bot interfaces.BotAPI, chatID int64) {

	UserStates[chatID] = &UserState{
		State: "waiting_for_collection_name",
	}

	replyMenu := tgbotapi.NewReplyKeyboard(

		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
			tgbotapi.NewKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ Home"),
		),
	)

	replyMenu.ResizeKeyboard = true

	msg := tgbotapi.NewMessage(chatID, "üìù")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = replyMenu
	if _, err := bot.Send(msg); err != nil {
		log.Error().Err(err).Msg("err showing learning")
	}
	msg1 := tgbotapi.NewMessage(chatID, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π –ø–æ–¥–±–æ—Ä–∫–∏:")

	if _, err := bot.Send(msg1); err != nil {
		log.Error().Err(err).Msg("err showing learning")
	}

}
func GetLearningMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"),
			tgbotapi.NewKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ Home"),
		),
	)
}
func ProcessCollectionCreation(bot interfaces.BotAPI, msg *tgbotapi.Message) {
	//–Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫—É
	userID := msg.From.ID
	chatID := msg.Chat.ID
	input := strings.TrimSpace(msg.Text)

	// —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
	if input == "‚ÑπÔ∏è –ü–æ–º–æ—â—å" {
		bot.Send(tgbotapi.NewMessage(chatID, "–ø–æ–º–æ—â–∏ –Ω–µ—Ç"))
		return
	}

	if input == "‚Ü© –ù–∞–∑–∞–¥ Home" {
		delete(UserStates, userID) //–ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç –∑–∞–±—ã–ª —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		// –∏ –Ω–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–ª —Å–ª–µ–¥—É—é—â—É—é —Ñ—Ä–∞–∑—É –∫–∞–∫ –∏–º—è –ø–æ–¥–±–æ—Ä–∫–∏.
		ShowMainMenu(bot, chatID)
		return
	}

	if input == "" || len(input) < 2 {
		msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ò–º—è –ø–æ–¥–±–æ—Ä–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
		bot.Send(msg)
		return
	}

	// 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è //–û–±–Ω–æ–≤–ª—è–µ–º userState
	state := UserStates[userID]
	// 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	state.CurrentColl = input
	state.State = "collection_created"

	// 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
	confirmMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üìö –ü–æ–¥–±–æ—Ä–∫–∞ *%s* —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", input))
	confirmMsg.ParseMode = "Markdown"
	confirmMsg.ReplyMarkup = GetLearningMenuKeyboard()
	if _, err := bot.Send(confirmMsg); err != nil {
		log.Error().Err(err).Msg("err showing learning")
	}

	// –ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–±–æ—Ä–∫—É –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userCollections[userID] = append(userCollections[userID], Collection{
		NameCollection: input,
		Collections:    []Collections{},
	})

	followupMsg := tgbotapi.NewMessage(chatID, "‚ûï –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.")
	bot.Send(followupMsg)
}

func SowUserCollections(bot interfaces.BotAPI, chatID int64, userID int64) {

	collections := userCollections[userID]

	if len(collections) == 0 {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–±–æ—Ä–æ–∫.")
		if _, err := bot.Send(msg); err != nil {
			log.Error().Err(err).Msg("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
			return
		}

	}

	var rows [][]tgbotapi.InlineKeyboardButton

	for _, coll := range collections {
		if coll.NameCollection == "" {
			log.Warn().Msg("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–±–æ—Ä–∫–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
			continue
		}
		btn := tgbotapi.NewInlineKeyboardButtonData(coll.NameCollection, "view_collection_"+coll.NameCollection)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	msg := tgbotapi.NewMessage(chatID, "üìÇ –í–∞—à–∏ –ø–æ–¥–±–æ—Ä–∫–∏:")
	msg.ReplyMarkup = keyboard

	if _, err := bot.Send(msg); err != nil {
		log.Error().Err(err).Msg("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–±–æ—Ä–∫–∏")
		return
	}
}
