package dispatcher

import (
	"fmt"
	"strings"

	"github.com/DavydAbbasov/trecker_bot/pkg/interfaces"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	log "github.com/rs/zerolog/log"
)

func ShowLearningMenu(bot interfaces.BotAPI, chatID int64) {
	text := `
üß† *Learning*

üåê –Ø–∑—ã–∫: *–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß* 
üìä –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: *463*  
üìò –ù–∞ —Å–µ–≥–æ–¥–Ω—è: *10*  
‚úÖ –í—ã—É—á–µ–Ω–æ: *296*  
üïê –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ: *—á–µ—Ä–µ–∑ 25 –º–∏–Ω*

`
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = buuildLerningKeyboard()

	_, err := bot.Send(msg)
	if err != nil {
		log.Error().Err(err).Msg("err showing learning")
	}
}

type UserState struct {
	State        string
	CurrentColl  string
	PendingWorld string
}
type Collections struct {
	TextInput1 string
	TextInput2 string
}
type Collection struct {
	NameCollection string
	Collections    []Collections
}

var UserStates = map[int64]*UserState{}

var userCollections = map[int64][]Collection{}

func buuildLerningKeyboard() tgbotapi.InlineKeyboardMarkup {
	row1 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–±–æ—Ä–∫—É", "add_collection"),
		tgbotapi.NewInlineKeyboardButtonData("üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞", "random_words"),
	)
	row2 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîÅ –ê—Ä—Ö–∏–≤ –ø–æ–¥–±–æ—Ä–æ–∫", "switch_learning_actv"),
		tgbotapi.NewInlineKeyboardButtonData("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "summary_learning"),
	)
	row3 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üóÇ –ë–∞–∑–∞ —Å–ª–æ–≤", "base_words"))
	return tgbotapi.NewInlineKeyboardMarkup(row1, row2, row3)
}

func (d *Dispatcher) AddCollection(chatID int64) {

	UserStates[chatID] = &UserState{
		State: "waiting_for_collection_name",
	}

	replyMenu := tgbotapi.NewReplyKeyboard(

		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
			tgbotapi.NewKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ Home"),
		),
	)

	replyMenu.ResizeKeyboard = true

	msg := tgbotapi.NewMessage(chatID, "üìù")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = replyMenu
	if _, err := d.bot.Send(msg); err != nil {
		log.Error().Err(err).Msg("err showing learning")
	}
	msg1 := tgbotapi.NewMessage(chatID, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π –ø–æ–¥–±–æ—Ä–∫–∏:")

	if _, err := d.bot.Send(msg1); err != nil {
		log.Error().Err(err).Msg("err showing learning")
	}

}
func GetLearningMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"),
			tgbotapi.NewKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ Home"),
		),
	)
}
func (d *Dispatcher) ProcessCollectionCreation(msg *tgbotapi.Message) {
	userID := msg.From.ID
	chatID := msg.Chat.ID
	input := strings.TrimSpace(msg.Text)

	if input == "‚ÑπÔ∏è –ü–æ–º–æ—â—å" {
		d.bot.Send(tgbotapi.NewMessage(chatID, "–ø–æ–º–æ—â–∏ –Ω–µ—Ç"))
		return
	}

	if input == "‚Ü© –ù–∞–∑–∞–¥ Home" {
		delete(UserStates, userID)
		d.ShowMainMenu(chatID)
		return
	}

	if input == "" || len(input) < 2 {
		msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ò–º—è –ø–æ–¥–±–æ—Ä–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
		d.bot.Send(msg)
		return
	}

	state := UserStates[userID]
	state.CurrentColl = input
	state.State = "collection_created"

	confirmMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üìö –ü–æ–¥–±–æ—Ä–∫–∞ *%s* —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", input))
	confirmMsg.ParseMode = "Markdown"
	confirmMsg.ReplyMarkup = GetLearningMenuKeyboard()
	if _, err := d.bot.Send(confirmMsg); err != nil {
		log.Error().Err(err).Msg("err showing learning")
	}

	userCollections[userID] = append(userCollections[userID], Collection{
		NameCollection: input,
		Collections:    []Collections{},
	})

	followupMsg := tgbotapi.NewMessage(chatID, "‚ûï –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.")
	d.bot.Send(followupMsg)
}

func (d *Dispatcher) SowUserCollections(chatID int64, userID int64) {

	collections := userCollections[userID]

	if len(collections) == 0 {
		msg := tgbotapi.NewMessage(chatID, "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–±–æ—Ä–æ–∫.")
		if _, err := d.bot.Send(msg); err != nil {
			log.Error().Err(err).Msg("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
			return
		}
	}
	var rows [][]tgbotapi.InlineKeyboardButton

	for _, coll := range collections {
		if coll.NameCollection == "" {
			log.Warn().Msg("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–±–æ—Ä–∫–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
			continue
		}
		btn := tgbotapi.NewInlineKeyboardButtonData(coll.NameCollection, "view_collection_"+coll.NameCollection)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	msg := tgbotapi.NewMessage(chatID, "üìÇ –í–∞—à–∏ –ø–æ–¥–±–æ—Ä–∫–∏:")
	msg.ReplyMarkup = keyboard

	if _, err := d.bot.Send(msg); err != nil {
		log.Error().Err(err).Msg("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–±–æ—Ä–∫–∏")
		return
	}
}
