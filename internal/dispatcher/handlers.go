package dispatcher

import (
	"github.com/DavydAbbasov/trecker_bot/pkg/interfaces"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	log "github.com/rs/zerolog/log"
)

/*
handlers - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥)
–†–µ–∞–ª–∏–∑—É—é—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ (/start, /help, /track)
–û—Ç–≤–µ—á–∞—é—Ç –∑–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã
(–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç" –∏–ª–∏ "–¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
*/
func HandleStart(bot interfaces.StoppableBot, msg *tgbotapi.Message) {
	//We get the chat ID to know who to send the reply to.
	chatID := msg.Chat.ID
	//create inline buuton for ckoose
	buttonRu := tgbotapi.NewInlineKeyboardButtonData("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "lang_ru")
	buttonEN := tgbotapi.NewInlineKeyboardButtonData("üá¨üáß English", "lang_en")
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(buttonRu, buttonEN),
	)
	//Sending a message with a language selection
	text := "Choose your language"
	message := tgbotapi.NewMessage(chatID, text)
	message.ReplyMarkup = keyboard
	//creating button text
	// buttonTrack := tgbotapi.NewKeyboardButton("/track") //a visual button in the keyboard.
	// buttonHelp := tgbotapi.NewKeyboardButton("/help")
	//merge two button in row for display ux
	// row := tgbotapi.NewKeyboardButtonRow(buttonTrack, buttonHelp)
	//creating object keyboard
	// keyboard := tgbotapi.NewReplyKeyboard(row)
	// creating message text
	// text := "Choose a action"                    //gets the user
	// message := tgbotapi.NewMessage(chatID, text) //chatID-to whom to send,text-What to say
	//attach the keyboard
	// message.ReplyMarkup = keyboard //"Show this keyboard along with the message."
	//send
	_, err := bot.Send(message) //Sends any text, emoji, command, button
	if err != nil {
		log.Error().Err(err).Msg("Error when sending the /start")
	}

}

//	func HandleTrack(bot interfaces.StoppableBot, msg *tgbotapi.Message) {
//		chatID := msg.Chat.ID
//		buttonTimerStandart := tgbotapi.NewKeyboardButton("Standart")
//		buttonTimerByYourself := tgbotapi.NewKeyboardButton("By yourself")
//		row := tgbotapi.NewKeyboardButtonRow(buttonTimerStandart, buttonTimerByYourself)
//		keyboard := tgbotapi.NewReplyKeyboard(row)
//		keyboard.ResizeKeyboard = true
//		text := "Choose"
//		message := tgbotapi.NewMessage(chatID, text)
//		message.ReplyMarkup = keyboard
//		_, err := bot.Send(message)
//		if err != nil {
//			log.Error().Err(err).Msg("eror track")
//		}
//	}
func ShowMainMenu(bot interfaces.StoppableBot, chatID int64) {

	buttonMyAccount := tgbotapi.NewKeyboardButton("üë§My account")
	buttonTrack := tgbotapi.NewKeyboardButton("üìàTrack")
	buttonSupport := tgbotapi.NewKeyboardButton("üß†Learning")
	buttonSubscriptions := tgbotapi.NewKeyboardButton("üí≥Subscription")

	row1 := tgbotapi.NewKeyboardButtonRow(buttonMyAccount, buttonTrack)
	row2 := tgbotapi.NewKeyboardButtonRow(buttonSupport, buttonSubscriptions)

	keyboard := tgbotapi.NewReplyKeyboard(row1, row2)

	//–£–º–µ–Ω—å—à–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç (–Ω–µ –±—É–¥–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –≤–µ—Å—å —ç–∫—Ä–∞–Ω).
	keyboard.ResizeKeyboard = true
	//–û–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏—Å—á–µ–∑–Ω–µ—Ç –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è.
	keyboard.OneTimeKeyboard = false

	msg := tgbotapi.NewMessage(chatID, "üè†Home")
	msg.ReplyMarkup = keyboard

	_, err := bot.Send(msg)
	if err != nil {
		log.Error().Err(err).Msg("err showing menu")
	}
}
func ShowProfileMock(bot interfaces.StoppableBot, chatID int64) {
	text := `
üë§ *My account*

‚Äî üë§ –ò–º—è: *–î–∞–≤–∏–¥*
‚Äî üß† –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: *–¢—Ä–µ–∫–∞–µ—Ç—Å—è*
‚Äî üî• Streak: *5 –¥–Ω–µ–π*
‚Äî üåê –Ø–∑—ã–∫: *–†—É—Å—Å–∫–∏–π*
‚Äî üìç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: *Europe/Berlin*
‚Äî üóÉ –ü–æ–¥–ø–∏—Å–∫–∞ : *12 month*
‚Äî üìß –ö–æ–Ω—Ç–∞–∫—Ç: @alaamov

–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ –Ω–∏–∂–µ:
`
	msg := tgbotapi.NewMessage(chatID, text)
	//–≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏ Markdown
	msg.ParseMode = "Markdown"
	//–≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é,
	msg.ReplyMarkup = buildProfileKeyboard()
	//—ç—Ç–æ –≤—ã–∑–æ–≤ API Telegram,
	// –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ msg –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
	_, err := bot.Send(msg)
	if err != nil {
		log.Error().Err(err).Msg("err showing profil")

	}
}
func buildProfileKeyboard() tgbotapi.InlineKeyboardMarkup {
	row1 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üåê –Ø–∑—ã–∫", "edit_language"),
		tgbotapi.NewInlineKeyboardButtonData("üìç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", "edit_timezone"),
	)
	row2 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìß –ö–æ–Ω—Ç–∞–∫—Ç", "edit_contact"),
		tgbotapi.NewInlineKeyboardButtonData("üîÅ –û–±–Ω–æ–≤–∏—Ç—å", "refresh_profile"),
	)
	return tgbotapi.NewInlineKeyboardMarkup(row1, row2)
}
func ShowTrackingMenu(bot interfaces.StoppableBot, chatID int64) {
	text := `
üìà *Track*

üìä –¢–µ–∫—É—â–∞—è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: *Go*  
‚è±  –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç—Ä–µ–∫: *4 —á 52 –º–∏–Ω* 
üî• –°—Ç—Ä–∏–∫: *104 –¥–Ω—è*  
üìÖ –°–µ–≥–æ–¥–Ω—è: *4 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*
`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = buildTrackKeyboard()

	_, err := bot.Send(msg)
	if err != nil {
		log.Error().Err(err).Msg("err showing profil")

	}
}
func buildTrackKeyboard() tgbotapi.InlineKeyboardMarkup {
	row1 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "selection_activity"),
		tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "create_activity"),
	)

	row2 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìà –ú–æ–∏ –æ—Ç—á—ë—Ç—ã", "summary"),
		tgbotapi.NewInlineKeyboardButtonData("üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å", "exit"),
	)

	return tgbotapi.NewInlineKeyboardMarkup(row1, row2)

}
func ShowLearningMenu(bot interfaces.StoppableBot, chatID int64) {
	text := `
üß† *Learning*

üåê –Ø–∑—ã–∫: *–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß* 
üìä –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: *463*  
üìò –ù–∞ —Å–µ–≥–æ–¥–Ω—è: *10*  
‚úÖ –í—ã—É—á–µ–Ω–æ: *296*  
üïê –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ: *—á–µ—Ä–µ–∑ 25 –º–∏–Ω*

`
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = buuildLerningKeyboard()

	_, err := bot.Send(msg)
	if err != nil {
		log.Error().Err(err).Msg("err showing learning")
	}
}
func buuildLerningKeyboard() tgbotapi.InlineKeyboardMarkup {
	row1 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –Ω–∞ –¥–µ–Ω—å", "add_wordsday"),
		tgbotapi.NewInlineKeyboardButtonData("üé≤ –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞", "random_words"),
	)
	row2 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîÅ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "switch_language"),
		tgbotapi.NewInlineKeyboardButtonData("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "summary"),
	)
	row3 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üóÇ –ë–∞–∑–∞ —Å–ª–æ–≤", "base_words"))
	return tgbotapi.NewInlineKeyboardMarkup(row1, row2, row3)
}
