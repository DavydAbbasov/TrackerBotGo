package dispatcher

import (
	"fmt"

	"github.com/DavydAbbasov/trecker_bot/pkg/interfaces"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	log "github.com/rs/zerolog/log"
)

func ShowTrackingMenu(bot interfaces.BotAPI, chatID int64) {
	text := `
üìà *Track*

üìä –¢–µ–∫—É—â–∞—è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: *Go*  
‚è±  –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç—Ä–µ–∫: *4 —á 52 –º–∏–Ω* 
üî• –°—Ç—Ä–∏–∫: *104 –¥–Ω—è*  
üìÖ –°–µ–≥–æ–¥–Ω—è: *4 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*
`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = buildTrackKeyboard()

	_, err := bot.Send(msg)
	if err != nil {
		log.Error().Err(err).Msg("err showing profil")

	}
}
func buildTrackKeyboard() tgbotapi.InlineKeyboardMarkup {
	row1 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "selection_activity"),
		tgbotapi.NewInlineKeyboardButtonData("‚ûï –°–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "create_activity"),
	)

	row2 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìà –ú–æ–∏ –æ—Ç—á—ë—Ç—ã", "summary"),
		tgbotapi.NewInlineKeyboardButtonData("üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å", "exit"),
	)

	return tgbotapi.NewInlineKeyboardMarkup(row1, row2)

}
func ShowActivityList(bot interfaces.BotAPI, chatID int64) {
	text := "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—á—ë—Ç–∞:"

	// –∑–∞–≥–ª—É—à–∫–∞ (mock), –ø–æ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ —Ö—Ä–∞–Ω–µ–Ω–∏—è
	activities := []string{"ü¶´Go", "üìòEnglish", "üèãÔ∏è‚Äç‚ôÄÔ∏èWorkout"}
	/*
					   –û–±—ä—è–≤–ª—è–µ—Ç—Å—è –¥–≤—É–º–µ—Ä–Ω—ã–π —Å—Ä–µ–∑ –∫–Ω–æ–ø–æ–∫,
					   –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
					   [][] –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã Telegram –ø–æ–Ω—è–ª, –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏ ‚Äî –ø–æ —Å—Ç—Ä–æ–∫–∞–º.

					–¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
				–ú—ã —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É (btn := ...)
				–ü–æ–º–µ—â–∞–µ–º –µ—ë –≤ —Ä—è–¥: row := [btn]
				–î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç —Ä—è–¥ –≤ –æ–±—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: rows = append(rows, row)

				–í–æ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –¥–≤—É–º–µ—Ä–Ω—ã–π —Å—Ä–µ–∑: [][]InlineKeyboardButton

		[][]InlineKeyboardButton = –º–∞—Å—Å–∏–≤ —Ä—è–¥–æ–≤
		[]InlineKeyboardButton = –æ–¥–∏–Ω —Ä—è–¥
		InlineKeyboardButton = –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞

		–∫–∞–∂–¥—ã–π –†–Ø–î –∫–Ω–æ–ø–æ–∫ ‚Äî —ç—Ç–æ —Å—Ä–µ–∑,
		–∏ –≤—Å–µ —Ä—è–¥—ã –≤–º–µ—Å—Ç–µ ‚Äî —ç—Ç–æ –¥–≤—É–º–µ—Ä–Ω—ã–π —Å—Ä–µ–∑.


	*/
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, activity := range activities {
		btn := tgbotapi.NewInlineKeyboardButtonData(activity, "activity_report_"+activity)
		//–ú—ã —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É (—Ä—è–¥) —Å —ç—Ç–æ–π –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
		//–ò –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç —Ä—è–¥ –≤ rows, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		//–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª ‚Äî –º—ã –≥–æ—Ç–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞.
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}
	/*
	   –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã NewInlineKeyboardMarkup

	   —Å–æ–∑–¥–∞—ë—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup,
	   –∫–æ—Ç–æ—Ä—ã–π –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–¥–∞—Ç—å –≤ msg.ReplyMarkup.
	*/

	//"–≤—ã–Ω—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Å—Ä–µ–∑–∞ rows –∏ –ø–µ—Ä–µ–¥–∞–π –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É –≤ —Ñ—É–Ω–∫—Ü–∏—é".
	inlineMenu := tgbotapi.NewInlineKeyboardMarkup(rows...)

	replyMenu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìä –°–µ–≥–æ–¥–Ω—è"),
			tgbotapi.NewKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ Home"),
		),
	)
	replyMenu.ResizeKeyboard = true

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = replyMenu

	_, err := bot.Send(msg)
	if err != nil {
		log.Error().Err(err).Msg("error sending activity list")
	}

	// –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º inline
	msg2 := tgbotapi.NewMessage(chatID, "üéØ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
	msg2.ReplyMarkup = inlineMenu
	bot.Send(msg2)

}
func SowTrackReportMenu(bot interfaces.BotAPI, chatID int64, activity string) {
	text := fmt.Sprintf(`

üìå *–û—Ç—á—ë—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:* _%s_ 
	
üî• –°—Ç—Ä–∏–∫: *104 –¥–Ω—è* 
üìÖ –ù–∞—á–∞–ª–æ: *12 –º–∞—è 2024*  
üìà –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: *31*  
‚è± –í—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è: *2 —á 40 –º–∏–Ω*

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:`, activity)

	replyMenu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìÖ –ü–µ—Ä–∏–æ–¥"),
			tgbotapi.NewKeyboardButton("üìä –ù–µ–¥–µ–ª—è"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç"),
			tgbotapi.NewKeyboardButton("üìä –°–µ–≥–æ–¥–Ω—è"),
		),

		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å"),
			tgbotapi.NewKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ Home"),
		),
	)
	replyMenu.ResizeKeyboard = true

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = replyMenu

	if _, err := bot.Send(msg); err != nil {
		log.Error().Err(err).Msg("error in displaying the report menu")
	}
}
func ShowCalendar(bot interfaces.BotAPI, chatID int64, activity string) {
	text := fmt.Sprintf(`
üìä *–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:* _%s_
üìÖ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∂–µ–ª–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥:*

üìà –°—Ä. –∫–ª. —á. –≤ –¥–µ–Ω—å: *2—á 32–º–∏–Ω*
üìë –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: *23.09.2026*

üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:
`, activity)

	// –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
	weekDays := []string{"–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"}
	// –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞—Ç—ã (–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏)
	dates := []string{"8.7", "9.7", "10.7", "11.7", "12.7", "13.7", "14.7"}
	// –§–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–æ–¥—Å—Ç–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ)
	data := []string{"2:10", "1:30", "0:00", "3", "2:45", "1", "0:15"}

	var rows [][]tgbotapi.InlineKeyboardButton

	var dayRow []tgbotapi.InlineKeyboardButton
	for _, day := range weekDays {
		dayRow = append(dayRow, tgbotapi.NewInlineKeyboardButtonData(day, "noop"))

	}
	rows = append(rows, dayRow)

	var dateRow []tgbotapi.InlineKeyboardButton
	for _, date := range dates {
		dateRow = append(dateRow, tgbotapi.NewInlineKeyboardButtonData(date, "noop"))
	}
	rows = append(rows, dateRow)

	var dataRow []tgbotapi.InlineKeyboardButton
	for _, entry := range data {
		dataRow = append(dataRow, tgbotapi.NewInlineKeyboardButtonData(entry, "noop"))
	}
	rows = append(rows, dataRow)

	navRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData(" ‚è™ ", "prev_week"),
		tgbotapi.NewInlineKeyboardButtonData(" ‚è© ", "next_week"),
	)
	rows = append(rows, navRow)

	inlineMenu := tgbotapi.NewInlineKeyboardMarkup(rows...)

	// 1. Reply-–∫–Ω–æ–ø–∫–∏ (–≤–Ω–∏–∑—É)
	replyMenu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
			tgbotapi.NewKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ Home"),
		),
	)
	replyMenu.ResizeKeyboard = true

	msgReply := tgbotapi.NewMessage(chatID, "üìÖ")
	msgReply.ReplyMarkup = replyMenu
	if _, err := bot.Send(msgReply); err != nil {
		log.Error().Err(err).Msg("error showing calendar reply")
	}

	// 2. –ò–Ω–ª–∞–π–Ω-–∫–∞–ª–µ–Ω–¥–∞—Ä—å
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = inlineMenu

	if _, err := bot.Send(msg); err != nil {
		log.Error().Err(err).Msg("error showing calendar inlain")
	}
}
func ShowCreateActivityPrompt(bot interfaces.BotAPI, chatID int64) {
	text := `
üìå *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*

–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Ç–æ–≥–æ, —á–µ–º –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å. –ü—Ä–∏–º–µ—Ä—ã:  
- üß† Go  
- üìö English  
- üèãÔ∏è Workout

–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏* 
`
	replyMenu := tgbotapi.NewReplyKeyboard(

		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å"),
		),

		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
			tgbotapi.NewKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ Home"),
		),
	)
	replyMenu.ResizeKeyboard = true

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = replyMenu

	if _, err := bot.Send(msg); err != nil {
		log.Error().Err(err).Msg("error showing create activity prompt")
	}
}
func SelectionActivityPromt(bot interfaces.BotAPI, chatID int64) {
	text := `
üìÇ *–í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å*

üìÇ –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: *ü¶´Go*
üìÇ –ê—Ä—Ö–∏–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ: *12*

*–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ç—Ä–µ–∫–∞:*
`
	activities := []string{"ü¶´Go", "üìòEnglish", "üèãÔ∏è‚Äç‚ôÄÔ∏èWorkout"}

	var rows [][]tgbotapi.InlineKeyboardButton

	for _, activity := range activities {
		btn := tgbotapi.NewInlineKeyboardButtonData(activity, "activity_selection_"+activity)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}

	inlineMenu := tgbotapi.NewInlineKeyboardMarkup(rows...)

	replyMenu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚è±Ô∏è –¢–∞–π–º–µ—Ä:15"),
			tgbotapi.NewKeyboardButton("‚è±Ô∏è –¢–∞–π–º–µ—Ä:60"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å —Ç–∞–º–µ—Ä"),
			tgbotapi.NewKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ Home"),
		),
	)

	replyMenu.ResizeKeyboard = true

	msgReply := tgbotapi.NewMessage(chatID, "üóÇ")
	msgReply.ReplyMarkup = replyMenu
	if _, err := bot.Send(msgReply); err != nil {
		log.Error().Err(err).Msg("error showing calendar reply")
	}

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = inlineMenu
	if _, err := bot.Send(msg); err != nil {
		log.Error().Err(err).Msg("error showing calendar reply")
	}
}
